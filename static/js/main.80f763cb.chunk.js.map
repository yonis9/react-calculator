{"version":3,"sources":["providers/calculator/operations.js","providers/calculator/calculator.provider.jsx","components/screen/Screen.jsx","components/button/Button.jsx","components/buttons-layout/buttons-data.js","components/buttons-layout/ButtonsLayout.jsx","components/calculator/Calculator.jsx","components/footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["operationsMap","a","b","CalculatorContext","createContext","value","storedValue","operation","message","clear","handleButtonClick","CalculatorProvider","children","useState","setValue","setStoredValue","setOperation","setMessage","useEffect","timer","setTimeout","clearTimeout","handleNumber","keyValue","length","handleOperation","handleDecimal","includes","calculate","Number","result","Provider","type","Screen","useContext","className","Button","onClick","BUTTONS_DATA","ButtonLayout","map","item","key","Calculator","Footer","href","target","rel","icon","faGithub","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.80f763cb.chunk.js","sourcesContent":["export const operationsMap = {\r\n    '+': (a,b) => a+b,\r\n    '-': (a,b) => a-b,\r\n    '/': (a,b) => a/b,\r\n    'x': (a,b) => a*b\r\n}","import React, { createContext, useState, useEffect } from 'react';\r\nimport { operationsMap } from './operations'\r\n\r\nexport const CalculatorContext = createContext({\r\n    value: '0',\r\n    storedValue: '', \r\n    operation: null,\r\n    message: '',\r\n    clear: () => {},\r\n    handleButtonClick: () => {}\r\n})\r\n\r\n\r\nconst CalculatorProvider = ({ children }) => {\r\n    const [value, setValue] = useState('0');\r\n    const [storedValue, setStoredValue] = useState('');\r\n    const [operation, setOperation] = useState(null);\r\n    const [message, setMessage] = useState('') \r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setMessage('')\r\n        },3000)\r\n        return () => clearTimeout(timer)\r\n    },[message])\r\n    \r\n\r\n    const handleButtonClick = (keyValue, type) => {\r\n        switch (type) {\r\n            case 'number': {\r\n                handleNumber(keyValue)\r\n                break;\r\n            }\r\n            case 'operation': {\r\n                handleOperation(keyValue)\r\n                break;\r\n            }\r\n            case 'decimal': {\r\n                handleDecimal();\r\n                break;\r\n            }\r\n    \r\n            case 'equal': {\r\n                calculate();\r\n                break;\r\n             }\r\n    \r\n             case 'ac': {\r\n                clear()\r\n                break;\r\n             }\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    \r\n    const handleNumber = keyValue => {\r\n        if (value.length === 8) return;\r\n\r\n        value === '0' ? setValue(keyValue) : setValue(value+keyValue);\r\n    }\r\n\r\n    const handleOperation = keyValue => {\r\n        setStoredValue(value || storedValue); // handle operation changes\r\n        setOperation(keyValue);\r\n        setValue('');\r\n    }\r\n\r\n    const handleDecimal = () => {\r\n        if (!value.includes('.')) {\r\n            !value ? setValue('0.') : setValue(value+'.');\r\n        }\r\n    }\r\n\r\n    const calculate = () => {\r\n        if (!operation || !value) return;\r\n\r\n        const a = Number(storedValue);\r\n        const b = Number(value);\r\n\r\n        if (operation === '/' && b === 0) {\r\n            setMessage('Cannot divide by 0');\r\n            return;\r\n        }\r\n    \r\n\r\n        const result = operationsMap[operation](a,b);\r\n    \r\n        setValue(`${result}`);\r\n        setStoredValue('')\r\n        setOperation(null);\r\n    }\r\n\r\n    const clear = () => {\r\n        setValue('0');\r\n        setStoredValue('');\r\n        setOperation(null);\r\n    }\r\n\r\n    return (\r\n        <CalculatorContext.Provider value={{\r\n            value,\r\n            storedValue,\r\n            operation,\r\n            message,\r\n            handleButtonClick\r\n        }}>\r\n            {children}\r\n        </CalculatorContext.Provider>\r\n    )\r\n}\r\n\r\n\r\nexport default CalculatorProvider;","import React, { useContext }from 'react';\r\nimport { CalculatorContext } from '../../providers/calculator/calculator.provider'\r\n\r\nimport './Screen.scss';\r\n\r\nconst Screen = () => {\r\n    const { value, operation, storedValue, message } = useContext(CalculatorContext)\r\n    return (\r\n        <div className='screen'>\r\n            \r\n            {\r\n            message ?\r\n            <div className='history'> {message} </div> \r\n            : operation ?\r\n            <div className='history'>{storedValue+operation+value}</div> :\r\n            <div className='history'>{value}</div>\r\n            }\r\n            \r\n            <div className={`main-screen ${value.length > 13 || storedValue.length > 13 ? 'small' : ''}`} >{value || storedValue}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Screen;","import React, { useContext } from 'react';\r\nimport  { CalculatorContext } from '../../providers/calculator/calculator.provider'\r\n\r\nimport './Button.scss';\r\n\r\nconst Button = ({ value, type }) => {\r\n    const  { handleButtonClick } = useContext(CalculatorContext)\r\n    return (\r\n    <div className={ `button ${type}`} onClick={() =>handleButtonClick(value, type)}>\r\n        {value}\r\n    </div>\r\n)}\r\nexport default Button;","const BUTTONS_DATA = [\r\n    {\r\n        value: 'AC',\r\n        type: 'ac',\r\n    },\r\n    {\r\n        value: '/',\r\n        type: 'operation',\r\n    },\r\n    {\r\n        value: 'x',\r\n        type: 'operation',\r\n    },\r\n    {\r\n        value: '7',\r\n        type: 'number',\r\n    },\r\n    {\r\n        value: '8',\r\n        type: 'number',\r\n    },\r\n    {\r\n        value: '9',\r\n        type: 'number',\r\n    },\r\n    {\r\n        value: '-',\r\n        type: 'operation',\r\n    },\r\n    {\r\n        value: '4',\r\n        type: 'number',\r\n    },\r\n    {\r\n        value: '5',\r\n        type: 'number',\r\n    },\r\n    {\r\n        value: '6',\r\n        type: 'number',\r\n    },\r\n    {\r\n        value: '+',\r\n        type: 'operation',\r\n    },\r\n    {\r\n        value: '1',\r\n        type: 'number',\r\n    }\r\n    ,\r\n    {\r\n        value: '2',\r\n        type: 'number',\r\n    },\r\n    {\r\n        value: '3',\r\n        type: 'number',\r\n    }\r\n    ,\r\n    {\r\n        value: '=',\r\n        type: 'equal',\r\n    },\r\n    {\r\n        value: '0',\r\n        type: 'number',\r\n    },\r\n    {\r\n        value: '.',\r\n        type: 'decimal',\r\n    }\r\n    \r\n    \r\n];\r\n\r\nexport default BUTTONS_DATA;","import React from'react';\r\n\r\nimport Button from '../button/Button';\r\n\r\nimport BUTTONS_DATA from  './buttons-data';\r\nimport './ButtonsLayout.scss';\r\n\r\nconst ButtonLayout = () => {\r\n    return (\r\n        <div className='buttons-layout'>\r\n            {\r\n                BUTTONS_DATA.map(item =>  <Button key={item.value} {...item} />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonLayout;","import React from 'react';\r\n\r\nimport './Calculator.scss';\r\nimport Screen from '../screen/Screen';\r\nimport ButtonLayout from '../buttons-layout/ButtonsLayout';\r\n\r\nconst Calculator = () => {\r\n    return (\r\n        <div className='calculator'>\r\n                <Screen />\r\n                <ButtonLayout />\r\n        </div>\r\n)\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\r\n\r\nimport './Footer.scss';\r\n\r\nconst Footer = () => (\r\n    <div className='footer'>\r\n        <p>\r\n            Made by Yoni Sisso\r\n            <a href='https://github.com/yonis9' target='_blank' rel=\"noopener noreferrer\">\r\n                <FontAwesomeIcon icon={faGithub} />\r\n            </a> \r\n        </p>\r\n    </div>\r\n)\r\n\r\nexport default Footer;","import React from 'react';\n\nimport Calculator from './components/calculator/Calculator';\nimport Footer from './components/footer/Footer';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='app'>\n      <Calculator/>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport CalculatorProvider from './providers/calculator/calculator.provider'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CalculatorProvider>\n      <App />\n    </CalculatorProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}